//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Input/JoyConInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JoyConInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JoyConInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""JoyConInput"",
    ""maps"": [
        {
            ""name"": ""Action"",
            ""id"": ""537fdde3-139e-4ba8-b00d-54e59fbe4c67"",
            ""actions"": [
                {
                    ""name"": ""ButtonY"",
                    ""type"": ""Button"",
                    ""id"": ""4b69e450-4878-4b79-872d-e3d58d48899c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""97e69a30-3e50-4f8a-bd44-df20796e149e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""JoyCon"",
            ""bindingGroup"": ""JoyCon"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Action
        m_Action = asset.FindActionMap("Action", throwIfNotFound: true);
        m_Action_ButtonY = m_Action.FindAction("ButtonY", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Action
    private readonly InputActionMap m_Action;
    private IActionActions m_ActionActionsCallbackInterface;
    private readonly InputAction m_Action_ButtonY;
    public struct ActionActions
    {
        private @JoyConInput m_Wrapper;
        public ActionActions(@JoyConInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ButtonY => m_Wrapper.m_Action_ButtonY;
        public InputActionMap Get() { return m_Wrapper.m_Action; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionActions set) { return set.Get(); }
        public void SetCallbacks(IActionActions instance)
        {
            if (m_Wrapper.m_ActionActionsCallbackInterface != null)
            {
                @ButtonY.started -= m_Wrapper.m_ActionActionsCallbackInterface.OnButtonY;
                @ButtonY.performed -= m_Wrapper.m_ActionActionsCallbackInterface.OnButtonY;
                @ButtonY.canceled -= m_Wrapper.m_ActionActionsCallbackInterface.OnButtonY;
            }
            m_Wrapper.m_ActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ButtonY.started += instance.OnButtonY;
                @ButtonY.performed += instance.OnButtonY;
                @ButtonY.canceled += instance.OnButtonY;
            }
        }
    }
    public ActionActions @Action => new ActionActions(this);
    private int m_JoyConSchemeIndex = -1;
    public InputControlScheme JoyConScheme
    {
        get
        {
            if (m_JoyConSchemeIndex == -1) m_JoyConSchemeIndex = asset.FindControlSchemeIndex("JoyCon");
            return asset.controlSchemes[m_JoyConSchemeIndex];
        }
    }
    public interface IActionActions
    {
        void OnButtonY(InputAction.CallbackContext context);
    }
}
