//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Input/SpoonMover.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SpoonMover : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SpoonMover()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SpoonMover"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""b36c7905-b63a-4fc8-bd00-192e02fcf607"",
            ""actions"": [
                {
                    ""name"": ""deltaX"",
                    ""type"": ""Value"",
                    ""id"": ""1fec95f5-a074-4cd4-b804-3b3ffcbf817b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""deltaY"",
                    ""type"": ""Value"",
                    ""id"": ""c2a651b7-4bd0-4407-ba38-5e9217dd4c62"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""21ba67b8-9911-4d9b-a720-f6992cf8389d"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""deltaX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea1ea0bc-9638-4969-ac1c-2efa81b0e4d9"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""deltaY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_deltaX = m_Move.FindAction("deltaX", throwIfNotFound: true);
        m_Move_deltaY = m_Move.FindAction("deltaY", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private IMoveActions m_MoveActionsCallbackInterface;
    private readonly InputAction m_Move_deltaX;
    private readonly InputAction m_Move_deltaY;
    public struct MoveActions
    {
        private @SpoonMover m_Wrapper;
        public MoveActions(@SpoonMover wrapper) { m_Wrapper = wrapper; }
        public InputAction @deltaX => m_Wrapper.m_Move_deltaX;
        public InputAction @deltaY => m_Wrapper.m_Move_deltaY;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void SetCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterface != null)
            {
                @deltaX.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnDeltaX;
                @deltaX.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnDeltaX;
                @deltaX.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnDeltaX;
                @deltaY.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnDeltaY;
                @deltaY.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnDeltaY;
                @deltaY.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnDeltaY;
            }
            m_Wrapper.m_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @deltaX.started += instance.OnDeltaX;
                @deltaX.performed += instance.OnDeltaX;
                @deltaX.canceled += instance.OnDeltaX;
                @deltaY.started += instance.OnDeltaY;
                @deltaY.performed += instance.OnDeltaY;
                @deltaY.canceled += instance.OnDeltaY;
            }
        }
    }
    public MoveActions @Move => new MoveActions(this);
    public interface IMoveActions
    {
        void OnDeltaX(InputAction.CallbackContext context);
        void OnDeltaY(InputAction.CallbackContext context);
    }
}
